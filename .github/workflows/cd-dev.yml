name: 'CD-dev'

on:
  push:
    branches: [ "dev" ]

permissions:
  contents: read

jobs:
  terraform:
    name: 'Terraform CD'
    runs-on: ubuntu-latest
    env:
      TF_WORKSPACE: dev
      TF_VAR_project_id: ${{ vars.DEV_PROJECT_ID }}
      TF_VAR_region: ${{ vars.DEV_REGION }}
      TF_VAR_zone: ${{ VARS.DEV_ZONE }}
      TF_VAR_bucket_name: ${{ vars.DEV_BUCKET_NAME }}
      TF_VAR_project_name: ${{ vars.DEV_project_name }}
      TF_VAR_db_tier: ${{ vars.DEV_DB_TIER }}
      TF_VAR_db_name: ${{ vars.DEV_DB_NAME }}
      TF_VAR_db_user: ${{ vars.DEV_DB_USER }}
      TF_VAR_db_password: ${{ secrets.DEV_DB_PASSWORD }}
      GOOGLE_CREDENTIALS: ${{ secrets.DEV_GOOGLE_CREDENTIALS }} 


    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v3

    # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: "1.9.8"
        
    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      run: terraform init
      env:
        GOOGLE_CREDENTIALS: ${{ env.GOOGLE_CREDENTIALS }} 

      # On push to "main", build or change infrastructure according to Terraform configuration files
      # Note: It is recommended to set up a required "strict" status check in your repository for "Terraform Cloud". See the documentation on "strict" required status checks for more information: https://help.github.com/en/github/administering-a-repository/types-of-required-status-checks
    # - name: Terraform Apply
    #   if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    #   run: terraform apply -auto-approve -input=false
    #   env:
    #     GOOGLE_CREDENTIALS: ${{ secrets.GOOGLE_CREDENTIALS }}

    - name: Terraform Plan
      run: terraform plan --var-file="dev.tfvars"
      env:
        GOOGLE_CREDENTIALS: ${{ env.GOOGLE_CREDENTIALS }}
    - name: Terraform Apply
      run: terraform apply -auto-approve -input=false
      env:
        GOOGLE_CREDENTIALS: ${{ env.GOOGLE_CREDENTIALS }}